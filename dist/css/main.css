:root {
  --nj-black-h: 0;
  --nj-black-s: 0%;
  --nj-black-l: 0%;
  --nj-black-a: 1;
}

*,
::before,
::after {
  box-sizing: border-box;
}

html {
  font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
  line-height: 1.15; /* 1. Correct the line height in all browsers. */
  -webkit-text-size-adjust: 100%; /* 2. Prevent adjustments of font size after orientation changes in iOS. */
  -moz-tab-size: 4; /* 3. Use a more readable tab size (opinionated). */
  tab-size: 4; /* 3 */
  font-size: 100% !important;
}

body {
  margin: 0; /* Remove the margin in all browsers. */
}

hr {
  height: 0; /* 1 */
  color: inherit; /* 2 */
}

abbr[title] {
  text-decoration: underline dotted;
}

b,
strong {
  font-weight: bolder;
}

code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

small {
  font-size: 80%;
}

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

table {
  text-indent: 0; /* 1 */
  border-color: inherit; /* 2 */
}

button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
Remove the inheritance of text transform in Edge and Firefox.
*/
button,
select {
  text-transform: none;
}

/**
Correct the inability to style clickable types in iOS and Safari.
*/
button,
[type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
}

/**
Remove the inner border and padding in Firefox.
*/
::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
Restore the focus styles unset by the previous rule.
*/
:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
Remove the additional ':invalid' styles in Firefox.
See: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737
*/
:-moz-ui-invalid {
  box-shadow: none;
}

/**
Remove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.
*/
legend {
  padding: 0;
}

/**
Add the correct vertical alignment in Chrome and Firefox.
*/
progress {
  vertical-align: baseline;
}

/**
Correct the cursor style of increment and decrement buttons in Safari.
*/
::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/**
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/
[type=search] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
Remove the inner padding in Chrome and Safari on macOS.
*/
::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to 'inherit' in Safari.
*/
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/*
Interactive
===========
*/
/*
Add the correct display in Chrome and Safari.
*/
summary {
  display: list-item;
}

body {
  font-family: Arial, Helvetica, sans-serif;
  font-style: normal;
  font-style: 100%;
}

section {
  overflow: hidden;
}

.container {
  margin: 0 auto;
  padding: 0 20px;
}

.hover-item {
  position: relative;
  border-radius: 10px;
  cursor: pointer;
}
.hover-item::after {
  content: "";
  position: absolute;
  width: 100%;
  height: 80%;
  background: linear-gradient(45deg, #ca8a04, #facc15);
  z-index: 0;
  border-radius: 10px;
  color: #000;
  transition: 0.3s ease-in;
  z-index: -1;
  opacity: 0;
}

.dropdown {
  scale: 1;
  transition: 0.2s ease-in;
  cursor: pointer;
}
.dropdown:active {
  scale: 0.9;
  transition: 0.2s ease-in;
}

.hover-item:hover {
  cursor: pointer;
}
.hover-item:hover::after {
  width: 120%;
  height: 100%;
  opacity: 1;
  transition: 0.3s ease-in;
}

.hover-scale {
  scale: 1;
  transition: 0.3s ease-in;
  cursor: pointer;
}
.hover-scale:hover {
  scale: 1.1;
  transition: 0.3s ease-in;
}
.hover-scale:active {
  scale: 0.9;
}

.font-small {
  font-size: 14px;
  line-height: 14px;
}

.footer-hover {
  position: relative;
}
.footer-hover::after {
  content: "";
  position: absolute;
  width: 150%;
  height: 120%;
  background: rgba(255, 255, 255, 0.5450980392);
  border-radius: 10px;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  opacity: 0;
  transition: 0.3s ease-in;
}
.footer-hover:hover::after {
  opacity: 1;
  transition: 0.3s ease-in;
}

.splide {
  max-width: 1680px;
  margin: 70px auto;
}
.splide .splide__track {
  max-width: 1560px;
  margin: 0 auto;
}
.splide .splide__arrow--prev {
  left: -0.5em;
}
.splide .splide__arrow--next {
  right: -0.5em;
}
.splide .slider__item {
  margin: 0 20px;
}
.splide .splide__arrow {
  background: transparent;
  transition: 0.3s ease-in;
  scale: 1;
  z-index: 11;
}
.splide .splide__arrow:hover {
  transition: 0.3s ease-in;
  scale: 1.1;
}
.splide .splide__arrow:active {
  scale: 0.9;
  transition: 0.3s ease-in;
  color: #ca8a04;
}

.footer {
  background: rgba(23, 22, 22, 0.475);
  padding: 75px 50px;
}

.header {
  background: hsla(var(--nj-black-h), calc(var(--nj-black-s) + 5%), calc(var(--nj-black-l) + 10%), calc(var(--nj-black-a) + 0));
  padding: calc(6.9444444444%) 0;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
