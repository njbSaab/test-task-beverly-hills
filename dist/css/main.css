:root {
  --nj-black-h: 0;
  --nj-black-s: 0%;
  --nj-black-l: 0%;
  --nj-black-a: 1;
}

*,
::before,
::after {
  box-sizing: border-box;
}

html {
  font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
  line-height: 1.15; /* 1. Correct the line height in all browsers. */
  -webkit-text-size-adjust: 100%; /* 2. Prevent adjustments of font size after orientation changes in iOS. */
  -moz-tab-size: 4; /* 3. Use a more readable tab size (opinionated). */
  tab-size: 4; /* 3 */
  font-size: 100% !important;
}

body {
  margin: 0; /* Remove the margin in all browsers. */
}

hr {
  height: 0; /* 1 */
  color: inherit; /* 2 */
}

abbr[title] {
  text-decoration: underline dotted;
}

b,
strong {
  font-weight: bolder;
}

code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

small {
  font-size: 80%;
}

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

table {
  text-indent: 0; /* 1 */
  border-color: inherit; /* 2 */
}

button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
Remove the inheritance of text transform in Edge and Firefox.
*/
button,
select {
  text-transform: none;
}

/**
Correct the inability to style clickable types in iOS and Safari.
*/
button,
[type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
}

/**
Remove the inner border and padding in Firefox.
*/
::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
Restore the focus styles unset by the previous rule.
*/
:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
Remove the additional ':invalid' styles in Firefox.
See: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737
*/
:-moz-ui-invalid {
  box-shadow: none;
}

/**
Remove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.
*/
legend {
  padding: 0;
}

/**
Add the correct vertical alignment in Chrome and Firefox.
*/
progress {
  vertical-align: baseline;
}

/**
Correct the cursor style of increment and decrement buttons in Safari.
*/
::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/**
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/
[type=search] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
Remove the inner padding in Chrome and Safari on macOS.
*/
::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to 'inherit' in Safari.
*/
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/*
Interactive
===========
*/
/*
Add the correct display in Chrome and Safari.
*/
summary {
  display: list-item;
}

body {
  font-family: Arial, Helvetica, sans-serif;
  font-style: normal;
  font-style: 100%;
}

section {
  overflow: hidden;
}

.container {
  margin: 0 auto;
  padding: 0 20px;
}

.hover-item {
  position: relative;
  border-radius: 10px;
  cursor: pointer;
}
.hover-item::after {
  content: "";
  position: absolute;
  width: 100%;
  height: 80%;
  background: linear-gradient(45deg, #ca8a04, #facc15);
  z-index: 0;
  border-radius: 10px;
  color: #000;
  transition: 0.3s ease-in;
  z-index: -1;
  opacity: 0;
}

.dropdown {
  scale: 1;
  transition: 0.2s ease-in;
  cursor: pointer;
}
.dropdown:active {
  scale: 0.9;
  transition: 0.2s ease-in;
}

.hover-item:hover {
  cursor: pointer;
}
.hover-item:hover::after {
  width: 120%;
  height: 100%;
  opacity: 1;
  transition: 0.3s ease-in;
}

.hover-scale {
  scale: 1;
  transition: 0.3s ease-in;
  cursor: pointer;
}
.hover-scale:hover {
  scale: 1.1;
  transition: 0.3s ease-in;
}
.hover-scale:active {
  scale: 0.9;
}

.font-small {
  font-size: 14px;
  line-height: 14px;
}

.footer-hover {
  position: relative;
}
.footer-hover::after {
  content: "";
  position: absolute;
  width: 150%;
  height: 120%;
  background: rgba(255, 255, 255, 0.5450980392);
  border-radius: 10px;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  opacity: 0;
  transition: 0.3s ease-in;
}
.footer-hover:hover::after {
  opacity: 1;
  transition: 0.3s ease-in;
}

.footer {
  background: rgba(23, 22, 22, 0.475);
  padding: 75px 50px;
}

.header {
  background: hsla(var(--nj-black-h), calc(var(--nj-black-s) + 5%), calc(var(--nj-black-l) + 10%), calc(var(--nj-black-a) + 0));
  padding: calc(6.9444444444%) 0;
}

.splide.tour-splide {
  max-width: 1680px;
  margin: 70px auto;
}
.splide.tour-splide .splide__track {
  max-width: 1560px;
  margin: 0 auto;
}
.splide.tour-splide .splide__arrow--prev {
  left: -0.5em;
}
.splide.tour-splide .splide__arrow--next {
  right: -0.5em;
}
.splide.tour-splide .slider__item {
  margin: 0 20px;
}
.splide.tour-splide .splide__arrow {
  background: transparent;
  transition: 0.3s ease-in;
  scale: 1;
  z-index: 11;
}
.splide.tour-splide .splide__arrow:hover {
  transition: 0.3s ease-in;
  scale: 1.1;
}
.splide.tour-splide .splide__arrow:active {
  scale: 0.9;
  transition: 0.3s ease-in;
  color: #ca8a04;
}

.splide.splide-main .splide__pagination {
  left: 5%;
}
.splide.splide-main .splide__arrow--prev {
  visibility: hidden;
}
.splide.splide-main .splide__arrow--next {
  visibility: hidden;
}
.splide.splide-main .splide__pagination__page {
  background-color: #ffffff;
}
.splide.splide-main .splide__pagination__page.is-active {
  background-color: #fbd341;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2UvX21peGlucy5zY3NzIiwiYmFzZS9fbW9kZXJuLW5vcm1hbGl6ZS5zY3NzIiwiYmFzZS9fZ2xvYmFsLnNjc3MiLCJjb21wb25lbnRzL19mb290ZXIuc2NzcyIsImNvbXBvbmVudHMvX2hlYWRlci5zY3NzIiwiY29tcG9uZW50cy9fc3BsaWRlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7RUFDRTtFQUNBO0VBQ0E7RUFDQTs7O0FDTkY7QUFBQTtBQUFBO0VBR0U7OztBQUdGO0VBQ0U7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBOzs7QUFHRjtFQUNFOzs7QUFHRjtFQUNFO0VBQ0E7OztBQUdGO0VBQ0U7OztBQUdGO0FBQUE7RUFFRTs7O0FBR0Y7QUFBQTtBQUFBO0FBQUE7RUFJRSwwRkFDYTtFQUNiOzs7QUFHRjtFQUNFOzs7QUFHRjtBQUFBO0VBRUU7RUFDQTtFQUNBO0VBQ0E7OztBQUdGO0VBQ0U7OztBQUdGO0VBQ0U7OztBQUdGO0VBQ0U7RUFDQTs7O0FBR0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtFQUtFO0VBQ0E7RUFDQTtFQUNBOzs7QUFHRjtBQUFBO0FBQUE7QUFJQTtBQUFBO0VBRUU7OztBQUdGO0FBQUE7QUFBQTtBQUlBO0FBQUE7QUFBQTtBQUFBO0VBSUU7OztBQUdGO0FBQUE7QUFBQTtBQUlBO0VBQ0U7RUFDQTs7O0FBR0Y7QUFBQTtBQUFBO0FBSUE7RUFDRTs7O0FBR0Y7QUFBQTtBQUFBO0FBQUE7QUFLQTtFQUNFOzs7QUFHRjtBQUFBO0FBQUE7QUFJQTtFQUNFOzs7QUFHRjtBQUFBO0FBQUE7QUFJQTtFQUNFOzs7QUFHRjtBQUFBO0FBQUE7QUFJQTtBQUFBO0VBRUU7OztBQUdGO0FBQUE7QUFBQTtBQUFBO0FBS0E7RUFDRTtFQUNBOzs7QUFHRjtBQUFBO0FBQUE7QUFJQTtFQUNFOzs7QUFHRjtBQUFBO0FBQUE7QUFBQTtBQUtBO0VBQ0U7RUFDQTs7O0FBR0Y7QUFBQTtBQUFBO0FBQUE7QUFLQTtBQUFBO0FBQUE7QUFJQTtFQUNFOzs7QUM1TEY7RUFDRTtFQUNBO0VBQ0E7OztBQUVGO0VBQ0U7OztBQUVGO0VBQ0U7RUFDQTs7O0FBRUY7RUFDRTtFQUNBO0VBQ0E7O0FBQ0E7RUFDRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBOzs7QUFHSjtFQUNFO0VBQ0E7RUFDQTs7QUFDQTtFQUNFO0VBQ0E7OztBQUdKO0VBQ0U7O0FBQ0E7RUFDRTtFQUNBO0VBQ0E7RUFDQTs7O0FBR0o7RUFDRTtFQUNBO0VBQ0E7O0FBQ0E7RUFDRTtFQUNBOztBQUVGO0VBQ0U7OztBQUdKO0VBQ0U7RUFDQTs7O0FBRUY7RUFDRTs7QUFDQTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0FBRUY7RUFDRTtFQUNBOzs7QUNqRko7RUFDSTtFQUNBOzs7QUNESjtFQUNJO0VBQ0E7OztBQ0RKO0VBQ0U7RUFDQTs7QUFDQTtFQUNFO0VBQ0E7O0FBRUY7RUFDRTs7QUFFRjtFQUNFOztBQUVGO0VBQ0U7O0FBRUY7RUFDRTtFQUNBO0VBQ0E7RUFDQTs7QUFDQTtFQUNFO0VBQ0E7O0FBRUY7RUFDRTtFQUNBO0VBQ0E7OztBQUtKO0VBQ0U7O0FBRUY7RUFDRTs7QUFFRjtFQUNFOztBQUVGO0VBQ0U7O0FBQ0E7RUFDRSIsImZpbGUiOiJtYWluLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIkB1c2UgXCJzYXNzOm1hdGhcIjtcblxuOnJvb3Qge1xuICAtLW5qLWJsYWNrLWg6IDA7ICAgIC8vINCn0LXRgNC90YvQuSDRhtCy0LXRgiDQsiBIU0wg0L3QtSDQuNC80LXQtdGCINC+0YLRgtC10L3QutCwXG4gIC0tbmotYmxhY2stczogMCU7ICAgLy8g0J3QsNGB0YvRidC10L3QvdC+0YHRgtGMINGH0LXRgNC90L7Qs9C+INGA0LDQstC90LAgMCVcbiAgLS1uai1ibGFjay1sOiAwJTsgICAvLyDQr9GA0LrQvtGB0YLRjCDRh9C10YDQvdC+0LPQviDRgtCw0LrQttC1INGA0LDQstC90LAgMCVcbiAgLS1uai1ibGFjay1hOiAxOyAgICAvLyDQn9C+0LvQvdCw0Y8g0L3QtdC/0YDQvtC30YDQsNGH0L3QvtGB0YLRjFxufVxuXG4vLyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINC30L3QsNGH0LXQvdC40Lkg0LLRjNGO0L/QvtGA0YLQvdGL0YUg0LXQtNC40L3QuNGGICh2dykg0L3QsCDQvtGB0L3QvtCy0LUg0L/QuNC60YHQtdC70LXQuVxuQGZ1bmN0aW9uIGdldC12dygkcHgpIHtcbiAgJHZ3LWNvbnRleHQ6ICgkbGF5b3V0LXdpZHRoICogMC4wMSkgKiAxcHg7IC8vINCa0L7QvdGC0LXQutGB0YIg0LLRjNGO0L/QvtGA0YLQvdGL0YUg0LXQtNC40L3QuNGGXG4gIEByZXR1cm4gbWF0aC5kaXYoJHB4LCAkdnctY29udGV4dCkgKiAxdnc7XG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0LfQvdCw0YfQtdC90LjQuSDQstGM0Y7Qv9C+0YDRgtC90YvRhSDQtdC00LjQvdC40YYgKHZ3KSDQvdCwINC+0YHQvdC+0LLQtSDQv9C40LrRgdC10LvQtdC5INGBINGD0YfQtdGC0L7QvCDRiNC40YDQuNC90Ysg0LzQsNC60LXRgtCwXG5AZnVuY3Rpb24gZ2V0LXZ3LWJ5LWxheW91dCgkcHgsICRsYXlvdXQ6ICRsYXlvdXQtd2lkdGgpIHtcbiAgJHZ3LWNvbnRleHQ6ICgkbGF5b3V0ICogMC4wMSkgKiAxcHg7IC8vINCa0L7QvdGC0LXQutGB0YIg0LLRjNGO0L/QvtGA0YLQvdGL0YUg0LXQtNC40L3QuNGGXG4gIEByZXR1cm4gbWF0aC5kaXYoJHB4LCAkdnctY29udGV4dCkgKiAxdnc7XG59XG5cbi8v0L/QtdGA0LXQstC+0LTQuNGCINGI0YDQuNGE0YIg0LjQtyDQv9C40LrRgdC10LvQtdC5INCyINCw0LTQsNC/0YLQuNCy0L3Ri9C5INGI0YDQuNGE0YJcbkBtaXhpbiByZXNwLWZvbnQtc2l6ZShcbiAgJHRhcmdldC1zaXplLFxuICAkbWF4LWZvbnQtc2l6ZTogbnVsbCxcbiAgJGJhc2UtZm9udC1zaXplOiAxNixcbiAgJHZpZXdwb3J0LXdpZHRoOiAxNDQwXG4pIHtcbiAgLy8g0JLRi9GH0LjRgdC70LXQvdC40LUg0LrQvtGN0YTRhNC40YbQuNC10L3RgtCwINC00LvRjyB2dyDRgSDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtdC8IG1hdGguZGl2KClcbiAgJHZ3LWNvZWZmaWNpZW50OiBtYXRoLmRpdigkdGFyZ2V0LXNpemUgKiAxMDAsICR2aWV3cG9ydC13aWR0aCk7XG4gIC8vINCS0YvRh9C40YHQu9C10L3QuNC1IHJlbSDRh9Cw0YHRgtC4INGBINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNC10LwgbWF0aC5kaXYoKVxuICAkcmVtLXBhcnQ6IG1hdGguZGl2KFxuICAgICR0YXJnZXQtc2l6ZSAtICgkdnctY29lZmZpY2llbnQgKiAkdmlld3BvcnQtd2lkdGggKiAwLjAxKSxcbiAgICAkYmFzZS1mb250LXNpemVcbiAgKTtcbiAgLy8g0KPRgdGC0LDQvdC+0LLQutCwINC80LDQutGB0LjQvNCw0LvRjNC90L7Qs9C+INGA0LDQt9C80LXRgNCwINGI0YDQuNGE0YLQsCwg0LXRgdC70Lgg0L7QvSDQvdC1INC/0YDQtdC00L7RgdGC0LDQstC70LXQvVxuICAkbWF4LXNpemU6IGlmKCRtYXgtZm9udC1zaXplLCAkbWF4LWZvbnQtc2l6ZSwgJHRhcmdldC1zaXplKTtcbiAgLy8g0JLRi9GH0LjRgdC70LXQvdC40LUg0LzQsNC60YHQuNC80LDQu9GM0L3QvtCz0L4g0YDQsNC30LzQtdGA0LAg0YjRgNC40YTRgtCwINCyIHJlbVxuICAkbWF4LWZvbnQtc2l6ZS1yZW06IG1hdGguZGl2KCRtYXgtc2l6ZSwgJGJhc2UtZm9udC1zaXplKTtcblxuICBmb250LXNpemU6IGNsYW1wKFxuICAgICN7JHJlbS1wYXJ0fXJlbSxcbiAgICBjYWxjKCN7JHJlbS1wYXJ0fXJlbSArICN7JHZ3LWNvZWZmaWNpZW50fXZ3KSxcbiAgICAjeyRtYXgtZm9udC1zaXplLXJlbX1yZW1cbiAgKTtcbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINC60L7QvdCy0LXRgNGC0LDRhtC40Lgg0L/QuNC60YHQtdC70LXQuSDQsiAlXG5AZnVuY3Rpb24gcmVzcCgkcHgsICRiYXNlLXdpZHRoOiAxNDQwKSB7XG4gICRwZXJjZW50YWdlOiBtYXRoLmRpdigkcHgsICRiYXNlLXdpZHRoKSAqIDEwMCU7XG4gIEByZXR1cm4gY2FsYygjeyRwZXJjZW50YWdlfSk7IC8vINCS0YvRh9C40YHQu9C10L3QuNC1INC/0YDQvtGG0LXQvdGC0LAg0L7RgiDQsdCw0LfQvtCy0L7QuSDRiNC40YDQuNC90Ytcbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINC60L7QvdCy0LXRgNGC0LDRhtC40Lgg0L/QuNC60YHQtdC70LXQuSDQsiDRgNC10LzRi1xuQGZ1bmN0aW9uIHJlbSgkcHgpIHtcbiAgLy8g0J/RgNC+0LLQtdGA0LrQsCwg0Y/QstC70Y/QtdGC0YHRjyDQu9C4INC30L3QsNGH0LXQvdC40LUg0YfQuNGB0LvQvtC8INGBINC10LTQuNC90LjRhtC10Lkg0LjQt9C80LXRgNC10L3QuNGPIFwicHhcIlxuICBAaWYgdHlwZS1vZigkcHgpID09IFwibnVtYmVyXCIgYW5kIHVuaXQoJHB4KSA9PSBcInB4XCIge1xuICAgIC8vINCj0LTQsNC70LXQvdC40LUg0LXQtNC40L3QuNGG0Ysg0LjQt9C80LXRgNC10L3QuNGPINC4INC/0YDQtdC+0LHRgNCw0LfQvtCy0LDQvdC40LUg0LIg0YDQtdC80YtcbiAgICBAcmV0dXJuIG1hdGguZGl2KCRweCwgMTZweCkgKiAxcmVtO1xuICB9IEBlbHNlIGlmIHR5cGUtb2YoJHB4KSA9PSBcIm51bWJlclwiIHtcbiAgICAvLyDQn9GA0LXQvtCx0YDQsNC30L7QstCw0L3QuNC1INGH0LjRgdC70L7QstC+0LPQviDQt9C90LDRh9C10L3QuNGPINCx0LXQtyDQtdC00LjQvdC40YYg0LjQt9C80LXRgNC10L3QuNGPINCyINGA0LXQvNGLXG4gICAgQHJldHVybiBtYXRoLmRpdigkcHgsIDE2KSAqIDFyZW07XG4gIH0gQGVsc2Uge1xuICAgIC8vINCS0L7Qt9Cy0YDQsNGJ0LXQvdC40LUg0LjRgdGF0L7QtNC90L7Qs9C+INC30L3QsNGH0LXQvdC40Y8sINC10YHQu9C4INC+0L3QviDQvdC1INGP0LLQu9GP0LXRgtGB0Y8g0YfQuNGB0LvQvtC8XG4gICAgQHJldHVybiAkcHg7XG4gIH1cbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINC/0YDQvtCy0LXRgNC60LgsINGP0LLQu9GP0LXRgtGB0Y8g0LvQuCDQt9C90LDRh9C10L3QuNC1INC/0LjQutGB0LXQu9GP0LzQuFxuQGZ1bmN0aW9uIGlzLXBpeGVscygkdmFsdWUpIHtcbiAgQHJldHVybiB0eXBlLW9mKCR2YWx1ZSkgPT0gXCJudW1iZXJcIiBhbmQgaW5kZXgoXCJweFwiLCB1bml0KCR2YWx1ZSkpICE9IG51bGw7XG59XG5cbi8vINCc0LjQutGB0LjQvSDQtNC70Y8g0YPRgdGC0LDQvdC+0LLQutC4INC80LXQttCx0YPQutCy0LXQvdC90L7Qs9C+INC40L3RgtC10YDQstCw0LvQsCDRgSDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtdC8IGVtINC10LTQuNC90LjRhiDQuNC30LzQtdGA0LXQvdC40Y9cbkBtaXhpbiBsZXR0ZXItc3BhY2UoJHNwYWNpbmcpIHtcbiAgbGV0dGVyLXNwYWNpbmc6IG1hdGguZGl2KCRzcGFjaW5nLCAxMDAwKSAqIDFlbTtcbn1cblxuLy8g0JLRgdC/0L7QvNC+0LPQsNGC0LXQu9GM0L3Ri9C5INC80LjQutGB0LjQvSDQtNC70Y8g0YPRgdGC0LDQvdC+0LLQutC4INGB0YLQuNC70LXQuSDRgtC10LrRgdGC0LAgKNGA0LDQt9C80LXRgCDRiNGA0LjRhNGC0LAsINCy0YvRgdC+0YLQsCDRgdGC0YDQvtC60Lgg0Lgg0LzQtdC20LHRg9C60LLQtdC90L3Ri9C5INC40L3RgtC10YDQstCw0LspINCyINGA0LXQvNCw0YVcbkBtaXhpbiBmb250LXNpemUoJGZvbnRTaXplLCAkbGluZUhlaWdodDogMCkge1xuICBmb250LXNpemU6IG1hdGguZGl2KCRmb250U2l6ZSwgMTYpICogMXJlbTtcbiAgQGlmICgkbGluZUhlaWdodCAhPSAwKSB7XG4gICAgbGluZS1oZWlnaHQ6IG1hdGguZGl2KCRsaW5lSGVpZ2h0LCAkZm9udFNpemUpO1xuICB9XG59XG5cbi8vINCc0LjQutGB0LjQvSDQtNC70Y8g0L7Qv9GA0LXQtNC10LvQtdC90LjRjyDRgdC+0LHRgdGC0LLQtdC90L3Ri9GFINGI0YDQuNGE0YLQvtCy0YvRhSDRgdC10LzQtdC50YHRgtCyINC4INC/0L7QtNC60LvRjtGH0LXQvdC40Y8g0YHQvtC+0YLQstC10YLRgdGC0LLRg9GO0YnQuNGFINGE0LDQudC70L7QsiDRiNGA0LjRhNGC0L7QslxuQG1peGluIGZvbnQtZmFjZSgkZm9udC1mYW1pbHksICRmaWxlLXBhdGgsICR3ZWlnaHQ6IDQwMCwgJHN0eWxlOiBub3JtYWwpIHtcbiAgQGZvbnQtZmFjZSB7XG4gICAgZm9udC1mYW1pbHk6ICRmb250LWZhbWlseTtcbiAgICBzcmM6IHVybChcIiN7JGZpbGUtcGF0aH0uZW90XCIpO1xuICAgIHNyYzpcbiAgICAgIHVybChcIiN7JGZpbGUtcGF0aH0uZW90PyNpZWZpeFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSxcbiAgICAgIHVybChcIiN7JGZpbGUtcGF0aH0ud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLFxuICAgICAgdXJsKFwiI3skZmlsZS1wYXRofS50dGZcIikgZm9ybWF0KFwidHJ1ZXR5cGVcIik7XG4gICAgZm9udC13ZWlnaHQ6ICR3ZWlnaHQ7XG4gICAgZm9udC1zdHlsZTogdW5xdW90ZSgkc3R5bGUpO1xuICAgIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgICBmb250LXN0cmV0Y2g6IG5vcm1hbDtcbiAgfVxufVxuXG4vLyDQnNC40LrRgdC40L3RiyDQtNC70Y8g0YHQvtC30LTQsNC90LjRjyDQvNC10LTQuNCwLdC30LDQv9GA0L7RgdC+0LJcblxuLy8g0JzQuNC90LjQvNCw0LvRjNC90LDRjyDRiNC40YDQuNC90LAg0Y3QutGA0LDQvdCwXG5AbWl4aW4gbWVkaWFNaW4oJG1lZGlhKSB7XG4gIEBtZWRpYSAobWluLXdpZHRoOiAjeyRtZWRpYX0pIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLyDQnNCw0LrRgdC40LzQsNC70YzQvdCw0Y8g0YjQuNGA0LjQvdCwINGN0LrRgNCw0L3QsFxuQG1peGluIG1lZGlhTWF4KCRtZWRpYSkge1xuICBAbWVkaWEgKG1heC13aWR0aDogI3skbWVkaWF9KSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8g0JTQuNCw0L/QsNC30L7QvSDRiNC40YDQuNC90Ysg0Y3QutGA0LDQvdCwINC+0YIg0LzQuNC90LjQvNCw0LvRjNC90L7QuSDQtNC+INC80LDQutGB0LjQvNCw0LvRjNC90L7QuVxuQG1peGluIG1lZGlhTWluTWF4KCRtaW4sICRtYXgpIHtcbiAgQG1lZGlhIChtaW4td2lkdGg6ICN7JG1pbn0pIGFuZCAobWF4LXdpZHRoOiAjeyRtYXh9KSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8g0JzQuNC60YHQuNC9INC00LvRjyDRgdGC0LjQu9C40LfQsNGG0LjQuCDQv9C70LXQudGB0YXQvtC70LTQtdGA0LAg0LIg0YLQtdC60YHRgtC+0LLRi9GFINC/0L7Qu9GP0YVcbkBtaXhpbiBwbGFjZWhvbGRlciB7XG4gICY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xuICAgIEBjb250ZW50O1xuICB9XG4gICY6LW1vei1wbGFjZWhvbGRlciB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbiAgJjo6LW1vei1wbGFjZWhvbGRlciB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbiAgJjotbXMtaW5wdXQtcGxhY2Vob2xkZXIge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vINCc0LjQutGB0LjQvSDQtNC70Y8g0L3QsNGB0YLRgNC+0LnQutC4INGB0YLQuNC70LXQuSDQv9C+0LvQvtGB0Ysg0L/RgNC+0LrRgNGD0YLQutC4INCyINCy0LXQsS3Qv9GA0LjQu9C+0LbQtdC90LjRj9GFXG5AbWl4aW4gc2Nyb2xsYmFyKCRzaXplOiAxMHB4LCAkdXNlOiAkc2Nyb2xsYmFyLWNvbG9yKSB7XG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICB3aWR0aDogJHNpemU7XG4gICAgaGVpZ2h0OiAkc2l6ZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKCR1c2UsIDAuMyk7XG4gIH1cbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICAgIGJhY2tncm91bmQ6IHJnYmEoJHVzZSwgMC44KTtcbiAgfVxuICAmOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogcmdiYSgkdXNlLCAxKTtcbiAgfVxufVxuXG4vLyDQnNC40LrRgdC40L0g0LTQu9GPINC90LDRgdGC0YDQvtC50LrQuCDRgdGC0LjQu9C10Lkg0L/QvtC70L7RgdGLINC/0YDQvtC60YDRg9GC0LrQuCDRgSDQstC+0LfQvNC+0LbQvdC+0YHRgtGM0Y4g0LLRi9Cx0L7RgNCwINGG0LLQtdGC0LAg0Lgg0LfQsNC60YDRg9Cz0LvQtdC90LjRjyDRg9Cz0LvQvtCyXG5AbWl4aW4gc2Nyb2xsYmFyLXZhcmlhYmxlKCRzaXplOiAxMHB4LCAkdXNlOiBcImJhc2VcIiwgJHJvdW5kZWQ6IGZhbHNlKSB7XG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICB3aWR0aDogJHNpemU7XG4gICAgaGVpZ2h0OiAkc2l6ZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBiYWNrZ3JvdW5kOiBjb2xvcigkdXNlLCAkYTogLTAuNyk7XG4gICAgQGlmICRyb3VuZGVkIHtcbiAgICAgIGJvcmRlci1yYWRpdXM6ICRzaXplICogMjtcbiAgICB9XG4gIH1cbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICAgIGJhY2tncm91bmQ6IGNvbG9yKCR1c2UsICRhOiAtMC4yKTtcbiAgICBAaWYgJHJvdW5kZWQge1xuICAgICAgYm9yZGVyLXJhZGl1czogJHNpemUgKiAyO1xuICAgIH1cbiAgfVxuICAmOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogY29sb3IoJHVzZSk7XG4gIH1cbn1cblxuLy8g0JzQuNC60YHQuNC9INC00LvRjyDRgdC60YDRi9GC0LjRjyDQv9C+0LvQvtGB0Ysg0L/RgNC+0LrRgNGD0YLQutC4INCyINCy0LXQsS3Qv9GA0LjQu9C+0LbQtdC90LjRj9GFXG5AbWl4aW4gc2Nyb2xsYmFyLWhpZGUoKSB7XG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIHdpZHRoOiAwO1xuICAgIGhlaWdodDogMDtcbiAgfVxufVxuXG4vLyDQnNC40LrRgdC40L0g0LTQu9GPINGB0L7Qt9C00LDQvdC40Y8g0L/QtdGA0LXRhdC+0LTQvtCyINGBINC/0L7QtNC00LXRgNC20LrQvtC5INC90LXRgdC60L7Qu9GM0LrQuNGFINGB0LLQvtC50YHRgtCyLCDQtNC70LjRgtC10LvRjNC90L7RgdGC0Lgg0Lgg0YTRg9C90LrRhtC40Lgg0L/Qu9Cw0LLQvdC+0YHRgtC4XG5AbWl4aW4gdHJhbnNpdGlvbigkcHJvcCwgJHRpbWU6IDE1MG1zLCAkZWFzaW5nOiBlYXNlLWluKSB7XG4gICR0cmFuc2l0aW9uOiAoKTtcbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBsZW5ndGgoJHByb3ApIHtcbiAgICBAZm9yICRqIGZyb20gMCB0byAobGVuZ3RoKCRwcm9wKSkgLSAobGVuZ3RoKCR0aW1lKSkge1xuICAgICAgJHRpbWU6IGpvaW4oJHRpbWUsIG50aCgkdGltZSwgLTEpKTtcbiAgICB9XG4gICAgQGZvciAkaiBmcm9tIDAgdG8gKGxlbmd0aCgkcHJvcCkpIC0gKGxlbmd0aCgkZWFzaW5nKSkge1xuICAgICAgJGVhc2luZzogam9pbigkZWFzaW5nLCBudGgoJGVhc2luZywgLTEpKTtcbiAgICB9XG4gICAgJHRyYW5zaXRpb246IGFwcGVuZChcbiAgICAgICR0cmFuc2l0aW9uLFxuICAgICAgKG50aCgkcHJvcCwgJGkpIG50aCgkdGltZSwgJGkpIG50aCgkZWFzaW5nLCAkaSkpLFxuICAgICAgY29tbWFcbiAgICApO1xuICB9XG4gIHRyYW5zaXRpb246ICR0cmFuc2l0aW9uO1xuXG4gICRzZXBhcmF0ZWQ6ICgpO1xuICBAaWYgbGVuZ3RoKCRwcm9wKSA+IDEge1xuICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRwcm9wKSB7XG4gICAgICAkc2VwYXJhdGVkOiBhcHBlbmQoJHNlcGFyYXRlZCwgbnRoKCRwcm9wLCAkaSksIGNvbW1hKTtcbiAgICB9XG4gICAgd2lsbC1jaGFuZ2U6ICRzZXBhcmF0ZWQ7XG4gIH0gQGVsc2UgaWYgbGVuZ3RoKCRwcm9wKSA9PSAxIHtcbiAgICBAaWYgJHByb3AgIT0gXCJhbGxcIiB7XG4gICAgICB3aWxsLWNoYW5nZTogJHByb3A7XG4gICAgfVxuICB9XG59XG5cbi8vINCc0LjQutGB0LjQvSDQtNC70Y8g0YHQvtC30LTQsNC90LjRjyDQsdC70L7QutCwINGBINGE0LjQutGB0LjRgNC+0LLQsNC90L3Ri9C8INGB0L7QvtGC0L3QvtGI0LXQvdC40LXQvCDRgdGC0L7RgNC+0L0gKNC90LDQv9GA0LjQvNC10YAsINC00LvRjyDQuNC30L7QsdGA0LDQttC10L3QuNC5KVxuQG1peGluIGFzcGVjdC1yYXRpbygkd2lkdGgsICRoZWlnaHQsICRlbGVtZW50OiBpZnJhbWUpIHtcbiAgd2lkdGg6IDEwMCU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgJjphZnRlciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctdG9wOiBtYXRoLmRpdigkaGVpZ2h0LCAkd2lkdGgpICogMTAwJTtcbiAgfVxuICA+ICN7JGVsZW1lbnR9IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICByaWdodDogMDtcbiAgICBib3R0b206IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHotaW5kZXg6IDI7XG4gICAgQGlmICgkZWxlbWVudCA9PSBcInZpZGVvXCIgb3IgJGVsZW1lbnQgPT0gXCJpZnJhbWVcIikge1xuICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICBvYmplY3QtcG9zaXRpb246IGNlbnRlcjtcbiAgICB9XG4gIH1cbn1cblxuLy8g0JzQuNC60YHQuNC9INC00LvRjyDQvtC/0YDQtdC00LXQu9C10L3QuNGPINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjNGB0LrQuNGFINGG0LLQtdGC0L7QsiDQsiDRhNC+0YDQvNCw0YLQtSBIU0xBXG5AbWl4aW4gZGVmaW5lLWNvbG9yKCRuYW1lLCAkaGV4KSB7XG4gIDpyb290IHtcbiAgICAtLW5qLSN7JG5hbWV9LWg6ICN7aHVlKCRoZXgpfTtcbiAgICAtLW5qLSN7JG5hbWV9LXM6ICN7c2F0dXJhdGlvbigkaGV4KX07XG4gICAgLS1uai0jeyRuYW1lfS1sOiAje2xpZ2h0bmVzcygkaGV4KX07XG4gICAgLS1uai0jeyRuYW1lfS1hOiAje2FscGhhKCRoZXgpfTtcbiAgfVxufVxuXG5AbWl4aW4gZGVmaW5lLWdyYWRpZW50KCRuYW1lLCAkZ3JhZGllbnQpIHtcbiAgOnJvb3Qge1xuICAgIC0tI3skbmFtZX0tZ3JhZGllbnQ6ICN7JGdyYWRpZW50fTtcbiAgfVxufVxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNGPINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjNGB0LrQuNGFINGG0LLQtdGC0L7QsiDQsiDRhNC+0YDQvNCw0YLQtSBIU0xBINGBINCy0L7Qt9C80L7QttC90L7RgdGC0YzRjiDQvdCw0YHRgtGA0L7QudC60Lgg0L7RgtGC0LXQvdC60LAsINC90LDRgdGL0YnQtdC90L3QvtGB0YLQuCwg0YHQstC10YLQu9C+0YLRiyDQuCDQv9GA0L7Qt9GA0LDRh9C90L7RgdGC0LhcbkBmdW5jdGlvbiB1c2UtY29sb3IoJG5hbWUsICRsOiAwJSwgJHM6IDAlLCAkYTogMCkge1xuICBAcmV0dXJuIGhzbGEoXG4gICAgdmFyKC0tbmotI3skbmFtZX0taCksXG4gICAgY2FsYyh2YXIoLS1uai0jeyRuYW1lfS1zKSArICN7JHN9KSxcbiAgICBjYWxjKHZhcigtLW5qLSN7JG5hbWV9LWwpICsgI3skbH0pLFxuICAgIGNhbGModmFyKC0tbmotI3skbmFtZX0tYSkgKyAjeyRhfSlcbiAgKTtcbn1cblxuLy8g0JzQuNC60YHQuNC9INC00LvRjyDRhtC10L3RgtGA0LjRgNC+0LLQsNC90LjRjyDRjdC70LXQvNC10L3RgtC+0LIg0YEg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LXQvCBmbGV4Ym94INGBINCy0L7Qt9C80L7QttC90L7RgdGC0YzRjiDQt9Cw0LTQsNGC0Ywg0L7RgtGB0YLRg9C/INC4INGA0LDRgdGB0YLQvtGP0L3QuNC1INC80LXQttC00YMg0Y3Qu9C10LzQtdC90YLQsNC80LhcbkBtaXhpbiBmbGV4LWNlbnRlci1nYXAtcGFkKCRnYXA6IDAsICRwYWRkaW5nOiAwKSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogJGdhcDtcbiAgcGFkZGluZzogcHgtdG8tcmVtKCRwYWRkaW5nKTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbi8vINCc0LjQutGB0LjQvSDQtNC70Y8g0YPRgdGC0LDQvdC+0LLQutC4INC20LjRgNC90L7RgdGC0Lgg0YjRgNC40YTRgtCwXG5AbWl4aW4gZncoJHNpemU6IDApIHtcbiAgZm9udC13ZWlnaHQ6ICRzaXplO1xufVxuIiwiKixcbjo6YmVmb3JlLFxuOjphZnRlciB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbmh0bWwge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpLCBcIlNlZ29lIFVJXCIsIFJvYm90bywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZixcbiAgICBcIkFwcGxlIENvbG9yIEVtb2ppXCIsIFwiU2Vnb2UgVUkgRW1vamlcIjtcbiAgbGluZS1oZWlnaHQ6IDEuMTU7IC8qIDEuIENvcnJlY3QgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy4gKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluIGlPUy4gKi9cbiAgLW1vei10YWItc2l6ZTogNDsgLyogMy4gVXNlIGEgbW9yZSByZWFkYWJsZSB0YWIgc2l6ZSAob3BpbmlvbmF0ZWQpLiAqL1xuICB0YWItc2l6ZTogNDsgLyogMyAqL1xuICBmb250LXNpemU6IDEwMCUgIWltcG9ydGFudDtcbn1cblxuYm9keSB7XG4gIG1hcmdpbjogMDsgLyogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLiAqL1xufVxuXG5ociB7XG4gIGhlaWdodDogMDsgLyogMSAqL1xuICBjb2xvcjogaW5oZXJpdDsgLyogMiAqL1xufVxuXG5hYmJyW3RpdGxlXSB7XG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDtcbn1cblxuYixcbnN0cm9uZyB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XG59XG5cbmNvZGUsXG5rYmQsXG5zYW1wLFxucHJlIHtcbiAgZm9udC1mYW1pbHk6IHVpLW1vbm9zcGFjZSwgU0ZNb25vLVJlZ3VsYXIsIENvbnNvbGFzLCBcIkxpYmVyYXRpb24gTW9ub1wiLCBNZW5sbyxcbiAgICBtb25vc3BhY2U7IC8qIDEgKi9cbiAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cbn1cblxuc21hbGwge1xuICBmb250LXNpemU6IDgwJTtcbn1cblxuc3ViLFxuc3VwIHtcbiAgZm9udC1zaXplOiA3NSU7XG4gIGxpbmUtaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuc3ViIHtcbiAgYm90dG9tOiAtMC4yNWVtO1xufVxuXG5zdXAge1xuICB0b3A6IC0wLjVlbTtcbn1cblxudGFibGUge1xuICB0ZXh0LWluZGVudDogMDsgLyogMSAqL1xuICBib3JkZXItY29sb3I6IGluaGVyaXQ7IC8qIDIgKi9cbn1cblxuYnV0dG9uLFxuaW5wdXQsXG5vcHRncm91cCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7IC8qIDEgKi9cbiAgZm9udC1zaXplOiAxMDAlOyAvKiAxICovXG4gIGxpbmUtaGVpZ2h0OiAxLjE1OyAvKiAxICovXG4gIG1hcmdpbjogMDsgLyogMiAqL1xufVxuXG4vKipcblJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSBhbmQgRmlyZWZveC5cbiovXG5cbmJ1dHRvbixcbnNlbGVjdCB7XG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xufVxuXG4vKipcbkNvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4qL1xuXG5idXR0b24sXG5bdHlwZT1cImJ1dHRvblwiXSxcblt0eXBlPVwicmVzZXRcIl0sXG5bdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xufVxuXG4vKipcblJlbW92ZSB0aGUgaW5uZXIgYm9yZGVyIGFuZCBwYWRkaW5nIGluIEZpcmVmb3guXG4qL1xuXG46Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXItc3R5bGU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi8qKlxuUmVzdG9yZSB0aGUgZm9jdXMgc3R5bGVzIHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxuKi9cblxuOi1tb3otZm9jdXNyaW5nIHtcbiAgb3V0bGluZTogMXB4IGRvdHRlZCBCdXR0b25UZXh0O1xufVxuXG4vKipcblJlbW92ZSB0aGUgYWRkaXRpb25hbCAnOmludmFsaWQnIHN0eWxlcyBpbiBGaXJlZm94LlxuU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9nZWNrby1kZXYvYmxvYi8yZjllYWNkOWQzZDk5NWM5MzdiNDI1MWE1NTU3ZDk1ZDQ5NGM5YmUxL2xheW91dC9zdHlsZS9yZXMvZm9ybXMuY3NzI0w3MjgtTDczN1xuKi9cblxuOi1tb3otdWktaW52YWxpZCB7XG4gIGJveC1zaGFkb3c6IG5vbmU7XG59XG5cbi8qKlxuUmVtb3ZlIHRoZSBwYWRkaW5nIHNvIGRldmVsb3BlcnMgYXJlIG5vdCBjYXVnaHQgb3V0IHdoZW4gdGhleSB6ZXJvIG91dCAnZmllbGRzZXQnIGVsZW1lbnRzIGluIGFsbCBicm93c2Vycy5cbiovXG5cbmxlZ2VuZCB7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi8qKlxuQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUgYW5kIEZpcmVmb3guXG4qL1xuXG5wcm9ncmVzcyB7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuLyoqXG5Db3JyZWN0IHRoZSBjdXJzb3Igc3R5bGUgb2YgaW5jcmVtZW50IGFuZCBkZWNyZW1lbnQgYnV0dG9ucyBpbiBTYWZhcmkuXG4qL1xuXG46Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXG46Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87XG59XG5cbi8qKlxuMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXG4yLiBDb3JyZWN0IHRoZSBvdXRsaW5lIHN0eWxlIGluIFNhZmFyaS5cbiovXG5cblt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8qIDEgKi9cbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7IC8qIDIgKi9cbn1cblxuLyoqXG5SZW1vdmUgdGhlIGlubmVyIHBhZGRpbmcgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4qL1xuXG46Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG59XG5cbi8qKlxuMS4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbjIuIENoYW5nZSBmb250IHByb3BlcnRpZXMgdG8gJ2luaGVyaXQnIGluIFNhZmFyaS5cbiovXG5cbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMSAqL1xuICBmb250OiBpbmhlcml0OyAvKiAyICovXG59XG5cbi8qXG5JbnRlcmFjdGl2ZVxuPT09PT09PT09PT1cbiovXG5cbi8qXG5BZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBDaHJvbWUgYW5kIFNhZmFyaS5cbiovXG5cbnN1bW1hcnkge1xuICBkaXNwbGF5OiBsaXN0LWl0ZW07XG59XG4iLCJib2R5IHtcbiAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogMTAwJTtcbn1cbnNlY3Rpb24ge1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuLmNvbnRhaW5lciB7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nOiAwIDIwcHg7XG59XG4uaG92ZXItaXRlbSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICAmOjphZnRlciB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiA4MCU7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCAjY2E4YTA0LCAjZmFjYzE1KTtcbiAgICB6LWluZGV4OiAwO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgY29sb3I6ICMwMDA7XG4gICAgdHJhbnNpdGlvbjogMC4zcyBlYXNlLWluO1xuICAgIHotaW5kZXg6IC0xO1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbn1cbi5kcm9wZG93biB7XG4gIHNjYWxlOiAxO1xuICB0cmFuc2l0aW9uOiAwLjJzIGVhc2UtaW47XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgJjphY3RpdmUge1xuICAgIHNjYWxlOiAwLjk7XG4gICAgdHJhbnNpdGlvbjogMC4ycyBlYXNlLWluO1xuICB9XG59XG4uaG92ZXItaXRlbTpob3ZlciB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgJjo6YWZ0ZXIge1xuICAgIHdpZHRoOiAxMjAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBvcGFjaXR5OiAxO1xuICAgIHRyYW5zaXRpb246IDAuM3MgZWFzZS1pbjtcbiAgfVxufVxuLmhvdmVyLXNjYWxlIHtcbiAgc2NhbGU6IDE7XG4gIHRyYW5zaXRpb246IDAuM3MgZWFzZS1pbjtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICAmOmhvdmVyIHtcbiAgICBzY2FsZTogMS4xO1xuICAgIHRyYW5zaXRpb246IDAuM3MgZWFzZS1pbjtcbiAgfVxuICAmOmFjdGl2ZSB7XG4gICAgc2NhbGU6IDAuOTtcbiAgfVxufVxuLmZvbnQtc21hbGwge1xuICBmb250LXNpemU6IDE0cHg7XG4gIGxpbmUtaGVpZ2h0OiAxNHB4O1xufVxuLmZvb3Rlci1ob3ZlciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgJjo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHdpZHRoOiAxNTAlO1xuICAgIGhlaWdodDogMTIwJTtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmOGI7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdG9wOiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgb3BhY2l0eTogMDtcbiAgICB0cmFuc2l0aW9uOiAwLjNzIGVhc2UtaW47XG4gIH1cbiAgJjpob3Zlcjo6YWZ0ZXIge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNpdGlvbjogMC4zcyBlYXNlLWluO1xuICB9XG59XG4iLCIuZm9vdGVye1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjMsIDIyLCAyMiwgMC40NzUpO1xuICAgIHBhZGRpbmc6IDc1cHggNTBweDtcbn1cbiIsIlxuLmhlYWRlcntcbiAgICBiYWNrZ3JvdW5kOiB1c2UtY29sb3IoYmxhY2ssIDEwJSwgNSUpO1xuICAgIHBhZGRpbmc6IHJlc3AoMTAwKSAwO1xufSIsIi8vISBzcGxpZGVcblxuLnNwbGlkZS50b3VyLXNwbGlkZSB7XG4gIG1heC13aWR0aDogMTY4MHB4O1xuICBtYXJnaW46IDcwcHggYXV0bztcbiAgLnNwbGlkZV9fdHJhY2sge1xuICAgIG1heC13aWR0aDogMTU2MHB4O1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICB9XG4gIC5zcGxpZGVfX2Fycm93LS1wcmV2IHtcbiAgICBsZWZ0OiAtMC41ZW07XG4gIH1cbiAgLnNwbGlkZV9fYXJyb3ctLW5leHQge1xuICAgIHJpZ2h0OiAtMC41ZW07XG4gIH1cbiAgLnNsaWRlcl9faXRlbSB7XG4gICAgbWFyZ2luOiAwIDIwcHg7XG4gIH1cbiAgLnNwbGlkZV9fYXJyb3cge1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgIHRyYW5zaXRpb246IDAuM3MgZWFzZS1pbjtcbiAgICBzY2FsZTogMTtcbiAgICB6LWluZGV4OiAxMTtcbiAgICAmOmhvdmVyIHtcbiAgICAgIHRyYW5zaXRpb246IDAuM3MgZWFzZS1pbjtcbiAgICAgIHNjYWxlOiAxLjE7XG4gICAgfVxuICAgICY6YWN0aXZlIHtcbiAgICAgIHNjYWxlOiAwLjk7XG4gICAgICB0cmFuc2l0aW9uOiAwLjNzIGVhc2UtaW47XG4gICAgICBjb2xvcjogI2NhOGEwNDtcbiAgICB9XG4gIH1cbn1cbi5zcGxpZGUuc3BsaWRlLW1haW4ge1xuICAuc3BsaWRlX19wYWdpbmF0aW9uIHtcbiAgICBsZWZ0OiA1JTtcbiAgfVxuICAuc3BsaWRlX19hcnJvdy0tcHJldiB7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB9XG4gIC5zcGxpZGVfX2Fycm93LS1uZXh0IHtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cbiAgLnNwbGlkZV9fcGFnaW5hdGlvbl9fcGFnZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICAmLmlzLWFjdGl2ZSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmJkMzQxO1xuICAgIH1cbiAgfVxufVxuIl19 */
