:root {
  --nj-black-h: 0;
  --nj-black-s: 0%;
  --nj-black-l: 0%;
  --nj-black-a: 1;
}

*,
::before,
::after {
  box-sizing: border-box;
}

html {
  font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
  line-height: 1.15; /* 1. Correct the line height in all browsers. */
  -webkit-text-size-adjust: 100%; /* 2. Prevent adjustments of font size after orientation changes in iOS. */
  -moz-tab-size: 4; /* 3. Use a more readable tab size (opinionated). */
  tab-size: 4; /* 3 */
  font-size: 100% !important;
}

body {
  margin: 0; /* Remove the margin in all browsers. */
}

hr {
  height: 0; /* 1 */
  color: inherit; /* 2 */
}

abbr[title] {
  text-decoration: underline dotted;
}

b,
strong {
  font-weight: bolder;
}

code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

small {
  font-size: 80%;
}

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

table {
  text-indent: 0; /* 1 */
  border-color: inherit; /* 2 */
}

button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
Remove the inheritance of text transform in Edge and Firefox.
*/
button,
select {
  text-transform: none;
}

/**
Correct the inability to style clickable types in iOS and Safari.
*/
button,
[type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
}

/**
Remove the inner border and padding in Firefox.
*/
::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
Restore the focus styles unset by the previous rule.
*/
:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
Remove the additional ':invalid' styles in Firefox.
See: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737
*/
:-moz-ui-invalid {
  box-shadow: none;
}

/**
Remove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.
*/
legend {
  padding: 0;
}

/**
Add the correct vertical alignment in Chrome and Firefox.
*/
progress {
  vertical-align: baseline;
}

/**
Correct the cursor style of increment and decrement buttons in Safari.
*/
::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/**
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/
[type=search] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
Remove the inner padding in Chrome and Safari on macOS.
*/
::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to 'inherit' in Safari.
*/
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/*
Interactive
===========
*/
/*
Add the correct display in Chrome and Safari.
*/
summary {
  display: list-item;
}

body {
  font-family: Arial, Helvetica, sans-serif;
  font-style: normal;
  font-style: 100%;
}

section {
  overflow: hidden;
}

.container {
  margin: 0 auto;
  padding: 0 20px;
}

.hover-item {
  position: relative;
  border-radius: 10px;
}
.hover-item::after {
  content: "";
  position: absolute;
  width: 100%;
  height: 80%;
  background: linear-gradient(45deg, #ca8a04, #facc15);
  z-index: 0;
  border-radius: 10px;
  color: #000;
  transition: 0.3s ease-in;
  z-index: -1;
  opacity: 0;
}

.dropdown {
  scale: 1;
  transition: 0.2s ease-in;
}
.dropdown:active {
  scale: 0.9;
  transition: 0.2s ease-in;
}

.hover-item:hover::after {
  width: 120%;
  height: 100%;
  opacity: 1;
  transition: 0.3s ease-in;
}

.hover-scale {
  scale: 1;
  transition: 0.3s ease-in;
}
.hover-scale:hover {
  scale: 1.1;
  transition: 0.3s ease-in;
}
.hover-scale:active {
  scale: 0.9;
}

.font-small {
  font-size: 14px;
  line-height: 14px;
}

.footer {
  background: rgba(23, 22, 22, 0.475);
  padding: 75px 50px;
}

.header {
  background: hsla(var(--nj-black-h), calc(var(--nj-black-s) + 5%), calc(var(--nj-black-l) + 10%), calc(var(--nj-black-a) + 0));
  padding: calc(6.9444444444%) 0;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2UvX21peGlucy5zY3NzIiwiYmFzZS9fbW9kZXJuLW5vcm1hbGl6ZS5zY3NzIiwiYmFzZS9fZ2xvYmFsLnNjc3MiLCJjb21wb25lbnRzL19mb290ZXIuc2NzcyIsImNvbXBvbmVudHMvX2hlYWRlci5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7OztBQ05GO0FBQUE7QUFBQTtFQUdFOzs7QUFHRjtFQUNFO0VBRUE7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7O0FBR0Y7RUFDRTs7O0FBR0Y7RUFDRTtFQUNBOzs7QUFHRjtFQUNFOzs7QUFHRjtBQUFBO0VBRUU7OztBQUdGO0FBQUE7QUFBQTtBQUFBO0VBSUUsMEZBQ2E7RUFDYjs7O0FBR0Y7RUFDRTs7O0FBR0Y7QUFBQTtFQUVFO0VBQ0E7RUFDQTtFQUNBOzs7QUFHRjtFQUNFOzs7QUFHRjtFQUNFOzs7QUFHRjtFQUNFO0VBQ0E7OztBQUdGO0FBQUE7QUFBQTtBQUFBO0FBQUE7RUFLRTtFQUNBO0VBQ0E7RUFDQTs7O0FBR0Y7QUFBQTtBQUFBO0FBSUE7QUFBQTtFQUVFOzs7QUFHRjtBQUFBO0FBQUE7QUFJQTtBQUFBO0FBQUE7QUFBQTtFQUlFOzs7QUFHRjtBQUFBO0FBQUE7QUFJQTtFQUNFO0VBQ0E7OztBQUdGO0FBQUE7QUFBQTtBQUlBO0VBQ0U7OztBQUdGO0FBQUE7QUFBQTtBQUFBO0FBS0E7RUFDRTs7O0FBR0Y7QUFBQTtBQUFBO0FBSUE7RUFDRTs7O0FBR0Y7QUFBQTtBQUFBO0FBSUE7RUFDRTs7O0FBR0Y7QUFBQTtBQUFBO0FBSUE7QUFBQTtFQUVFOzs7QUFHRjtBQUFBO0FBQUE7QUFBQTtBQUtBO0VBQ0U7RUFDQTs7O0FBR0Y7QUFBQTtBQUFBO0FBSUE7RUFDRTs7O0FBR0Y7QUFBQTtBQUFBO0FBQUE7QUFLQTtFQUNFO0VBQ0E7OztBQUdGO0FBQUE7QUFBQTtBQUFBO0FBS0E7QUFBQTtBQUFBO0FBSUE7RUFDRTs7O0FDNUxGO0VBQ0U7RUFDQTtFQUNBOzs7QUFFRjtFQUNFOzs7QUFFRjtFQUNFO0VBQ0E7OztBQUVGO0VBQ0U7RUFDQTs7QUFDQTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7OztBQUdKO0VBQ0U7RUFDQTs7QUFDQTtFQUNFO0VBQ0E7OztBQUlGO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7OztBQUdKO0VBQ0U7RUFDQTs7QUFDQTtFQUNFO0VBQ0E7O0FBRUY7RUFDRTs7O0FBR0o7RUFDRTtFQUNBOzs7QUMxREY7RUFDSTtFQUNBOzs7QUNESjtFQUNJO0VBQ0EiLCJmaWxlIjoibWFpbi5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAdXNlIFwic2FzczptYXRoXCI7XG5cbjpyb290IHtcbiAgLS1uai1ibGFjay1oOiAwOyAgICAvLyDQp9C10YDQvdGL0Lkg0YbQstC10YIg0LIgSFNMINC90LUg0LjQvNC10LXRgiDQvtGC0YLQtdC90LrQsFxuICAtLW5qLWJsYWNrLXM6IDAlOyAgIC8vINCd0LDRgdGL0YnQtdC90L3QvtGB0YLRjCDRh9C10YDQvdC+0LPQviDRgNCw0LLQvdCwIDAlXG4gIC0tbmotYmxhY2stbDogMCU7ICAgLy8g0K/RgNC60L7RgdGC0Ywg0YfQtdGA0L3QvtCz0L4g0YLQsNC60LbQtSDRgNCw0LLQvdCwIDAlXG4gIC0tbmotYmxhY2stYTogMTsgICAgLy8g0J/QvtC70L3QsNGPINC90LXQv9GA0L7Qt9GA0LDRh9C90L7RgdGC0Yxcbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINC/0L7Qu9GD0YfQtdC90LjRjyDQt9C90LDRh9C10L3QuNC5INCy0YzRjtC/0L7RgNGC0L3Ri9GFINC10LTQuNC90LjRhiAodncpINC90LAg0L7RgdC90L7QstC1INC/0LjQutGB0LXQu9C10LlcbkBmdW5jdGlvbiBnZXQtdncoJHB4KSB7XG4gICR2dy1jb250ZXh0OiAoJGxheW91dC13aWR0aCAqIDAuMDEpICogMXB4OyAvLyDQmtC+0L3RgtC10LrRgdGCINCy0YzRjtC/0L7RgNGC0L3Ri9GFINC10LTQuNC90LjRhlxuICBAcmV0dXJuIG1hdGguZGl2KCRweCwgJHZ3LWNvbnRleHQpICogMXZ3O1xufVxuXG4vLyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINC30L3QsNGH0LXQvdC40Lkg0LLRjNGO0L/QvtGA0YLQvdGL0YUg0LXQtNC40L3QuNGGICh2dykg0L3QsCDQvtGB0L3QvtCy0LUg0L/QuNC60YHQtdC70LXQuSDRgSDRg9GH0LXRgtC+0Lwg0YjQuNGA0LjQvdGLINC80LDQutC10YLQsFxuQGZ1bmN0aW9uIGdldC12dy1ieS1sYXlvdXQoJHB4LCAkbGF5b3V0OiAkbGF5b3V0LXdpZHRoKSB7XG4gICR2dy1jb250ZXh0OiAoJGxheW91dCAqIDAuMDEpICogMXB4OyAvLyDQmtC+0L3RgtC10LrRgdGCINCy0YzRjtC/0L7RgNGC0L3Ri9GFINC10LTQuNC90LjRhlxuICBAcmV0dXJuIG1hdGguZGl2KCRweCwgJHZ3LWNvbnRleHQpICogMXZ3O1xufVxuXG4vL9C/0LXRgNC10LLQvtC00LjRgiDRiNGA0LjRhNGCINC40Lcg0L/QuNC60YHQtdC70LXQuSDQsiDQsNC00LDQv9GC0LjQstC90YvQuSDRiNGA0LjRhNGCXG5AbWl4aW4gcmVzcC1mb250LXNpemUoXG4gICR0YXJnZXQtc2l6ZSxcbiAgJG1heC1mb250LXNpemU6IG51bGwsXG4gICRiYXNlLWZvbnQtc2l6ZTogMTYsXG4gICR2aWV3cG9ydC13aWR0aDogMTQ0MFxuKSB7XG4gIC8vINCS0YvRh9C40YHQu9C10L3QuNC1INC60L7RjdGE0YTQuNGG0LjQtdC90YLQsCDQtNC70Y8gdncg0YEg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LXQvCBtYXRoLmRpdigpXG4gICR2dy1jb2VmZmljaWVudDogbWF0aC5kaXYoJHRhcmdldC1zaXplICogMTAwLCAkdmlld3BvcnQtd2lkdGgpO1xuICAvLyDQktGL0YfQuNGB0LvQtdC90LjQtSByZW0g0YfQsNGB0YLQuCDRgSDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtdC8IG1hdGguZGl2KClcbiAgJHJlbS1wYXJ0OiBtYXRoLmRpdihcbiAgICAkdGFyZ2V0LXNpemUgLSAoJHZ3LWNvZWZmaWNpZW50ICogJHZpZXdwb3J0LXdpZHRoICogMC4wMSksXG4gICAgJGJhc2UtZm9udC1zaXplXG4gICk7XG4gIC8vINCj0YHRgtCw0L3QvtCy0LrQsCDQvNCw0LrRgdC40LzQsNC70YzQvdC+0LPQviDRgNCw0LfQvNC10YDQsCDRiNGA0LjRhNGC0LAsINC10YHQu9C4INC+0L0g0L3QtSDQv9GA0LXQtNC+0YHRgtCw0LLQu9C10L1cbiAgJG1heC1zaXplOiBpZigkbWF4LWZvbnQtc2l6ZSwgJG1heC1mb250LXNpemUsICR0YXJnZXQtc2l6ZSk7XG4gIC8vINCS0YvRh9C40YHQu9C10L3QuNC1INC80LDQutGB0LjQvNCw0LvRjNC90L7Qs9C+INGA0LDQt9C80LXRgNCwINGI0YDQuNGE0YLQsCDQsiByZW1cbiAgJG1heC1mb250LXNpemUtcmVtOiBtYXRoLmRpdigkbWF4LXNpemUsICRiYXNlLWZvbnQtc2l6ZSk7XG5cbiAgZm9udC1zaXplOiBjbGFtcChcbiAgICAjeyRyZW0tcGFydH1yZW0sXG4gICAgY2FsYygjeyRyZW0tcGFydH1yZW0gKyAjeyR2dy1jb2VmZmljaWVudH12dyksXG4gICAgI3skbWF4LWZvbnQtc2l6ZS1yZW19cmVtXG4gICk7XG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQutC+0L3QstC10YDRgtCw0YbQuNC4INC/0LjQutGB0LXQu9C10Lkg0LIgJVxuQGZ1bmN0aW9uIHJlc3AoJHB4LCAkYmFzZS13aWR0aDogMTQ0MCkge1xuICAkcGVyY2VudGFnZTogbWF0aC5kaXYoJHB4LCAkYmFzZS13aWR0aCkgKiAxMDAlO1xuICBAcmV0dXJuIGNhbGMoI3skcGVyY2VudGFnZX0pOyAvLyDQktGL0YfQuNGB0LvQtdC90LjQtSDQv9GA0L7RhtC10L3RgtCwINC+0YIg0LHQsNC30L7QstC+0Lkg0YjQuNGA0LjQvdGLXG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQutC+0L3QstC10YDRgtCw0YbQuNC4INC/0LjQutGB0LXQu9C10Lkg0LIg0YDQtdC80YtcbkBmdW5jdGlvbiByZW0oJHB4KSB7XG4gIC8vINCf0YDQvtCy0LXRgNC60LAsINGP0LLQu9GP0LXRgtGB0Y8g0LvQuCDQt9C90LDRh9C10L3QuNC1INGH0LjRgdC70L7QvCDRgSDQtdC00LjQvdC40YbQtdC5INC40LfQvNC10YDQtdC90LjRjyBcInB4XCJcbiAgQGlmIHR5cGUtb2YoJHB4KSA9PSBcIm51bWJlclwiIGFuZCB1bml0KCRweCkgPT0gXCJweFwiIHtcbiAgICAvLyDQo9C00LDQu9C10L3QuNC1INC10LTQuNC90LjRhtGLINC40LfQvNC10YDQtdC90LjRjyDQuCDQv9GA0LXQvtCx0YDQsNC30L7QstCw0L3QuNC1INCyINGA0LXQvNGLXG4gICAgQHJldHVybiBtYXRoLmRpdigkcHgsIDE2cHgpICogMXJlbTtcbiAgfSBAZWxzZSBpZiB0eXBlLW9mKCRweCkgPT0gXCJudW1iZXJcIiB7XG4gICAgLy8g0J/RgNC10L7QsdGA0LDQt9C+0LLQsNC90LjQtSDRh9C40YHQu9C+0LLQvtCz0L4g0LfQvdCw0YfQtdC90LjRjyDQsdC10Lcg0LXQtNC40L3QuNGGINC40LfQvNC10YDQtdC90LjRjyDQsiDRgNC10LzRi1xuICAgIEByZXR1cm4gbWF0aC5kaXYoJHB4LCAxNikgKiAxcmVtO1xuICB9IEBlbHNlIHtcbiAgICAvLyDQktC+0LfQstGA0LDRidC10L3QuNC1INC40YHRhdC+0LTQvdC+0LPQviDQt9C90LDRh9C10L3QuNGPLCDQtdGB0LvQuCDQvtC90L4g0L3QtSDRj9Cy0LvRj9C10YLRgdGPINGH0LjRgdC70L7QvFxuICAgIEByZXR1cm4gJHB4O1xuICB9XG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQv9GA0L7QstC10YDQutC4LCDRj9Cy0LvRj9C10YLRgdGPINC70Lgg0LfQvdCw0YfQtdC90LjQtSDQv9C40LrRgdC10LvRj9C80LhcbkBmdW5jdGlvbiBpcy1waXhlbHMoJHZhbHVlKSB7XG4gIEByZXR1cm4gdHlwZS1vZigkdmFsdWUpID09IFwibnVtYmVyXCIgYW5kIGluZGV4KFwicHhcIiwgdW5pdCgkdmFsdWUpKSAhPSBudWxsO1xufVxuXG4vLyDQnNC40LrRgdC40L0g0LTQu9GPINGD0YHRgtCw0L3QvtCy0LrQuCDQvNC10LbQsdGD0LrQstC10L3QvdC+0LPQviDQuNC90YLQtdGA0LLQsNC70LAg0YEg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LXQvCBlbSDQtdC00LjQvdC40YYg0LjQt9C80LXRgNC10L3QuNGPXG5AbWl4aW4gbGV0dGVyLXNwYWNlKCRzcGFjaW5nKSB7XG4gIGxldHRlci1zcGFjaW5nOiBtYXRoLmRpdigkc3BhY2luZywgMTAwMCkgKiAxZW07XG59XG5cbi8vINCS0YHQv9C+0LzQvtCz0LDRgtC10LvRjNC90YvQuSDQvNC40LrRgdC40L0g0LTQu9GPINGD0YHRgtCw0L3QvtCy0LrQuCDRgdGC0LjQu9C10Lkg0YLQtdC60YHRgtCwICjRgNCw0LfQvNC10YAg0YjRgNC40YTRgtCwLCDQstGL0YHQvtGC0LAg0YHRgtGA0L7QutC4INC4INC80LXQttCx0YPQutCy0LXQvdC90YvQuSDQuNC90YLQtdGA0LLQsNC7KSDQsiDRgNC10LzQsNGFXG5AbWl4aW4gZm9udC1zaXplKCRmb250U2l6ZSwgJGxpbmVIZWlnaHQ6IDApIHtcbiAgZm9udC1zaXplOiBtYXRoLmRpdigkZm9udFNpemUsIDE2KSAqIDFyZW07XG4gIEBpZiAoJGxpbmVIZWlnaHQgIT0gMCkge1xuICAgIGxpbmUtaGVpZ2h0OiBtYXRoLmRpdigkbGluZUhlaWdodCwgJGZvbnRTaXplKTtcbiAgfVxufVxuXG4vLyDQnNC40LrRgdC40L0g0LTQu9GPINC+0L/RgNC10LTQtdC70LXQvdC40Y8g0YHQvtCx0YHRgtCy0LXQvdC90YvRhSDRiNGA0LjRhNGC0L7QstGL0YUg0YHQtdC80LXQudGB0YLQsiDQuCDQv9C+0LTQutC70Y7Rh9C10L3QuNGPINGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGJ0LjRhSDRhNCw0LnQu9C+0LIg0YjRgNC40YTRgtC+0LJcbkBtaXhpbiBmb250LWZhY2UoJGZvbnQtZmFtaWx5LCAkZmlsZS1wYXRoLCAkd2VpZ2h0OiA0MDAsICRzdHlsZTogbm9ybWFsKSB7XG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHk7XG4gICAgc3JjOiB1cmwoXCIjeyRmaWxlLXBhdGh9LmVvdFwiKTtcbiAgICBzcmM6XG4gICAgICB1cmwoXCIjeyRmaWxlLXBhdGh9LmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksXG4gICAgICB1cmwoXCIjeyRmaWxlLXBhdGh9LndvZmZcIikgZm9ybWF0KFwid29mZlwiKSxcbiAgICAgIHVybChcIiN7JGZpbGUtcGF0aH0udHRmXCIpIGZvcm1hdChcInRydWV0eXBlXCIpO1xuICAgIGZvbnQtd2VpZ2h0OiAkd2VpZ2h0O1xuICAgIGZvbnQtc3R5bGU6IHVucXVvdGUoJHN0eWxlKTtcbiAgICBmb250LWRpc3BsYXk6IHN3YXA7XG4gICAgZm9udC1zdHJldGNoOiBub3JtYWw7XG4gIH1cbn1cblxuLy8g0JzQuNC60YHQuNC90Ysg0LTQu9GPINGB0L7Qt9C00LDQvdC40Y8g0LzQtdC00LjQsC3Qt9Cw0L/RgNC+0YHQvtCyXG5cbi8vINCc0LjQvdC40LzQsNC70YzQvdCw0Y8g0YjQuNGA0LjQvdCwINGN0LrRgNCw0L3QsFxuQG1peGluIG1lZGlhTWluKCRtZWRpYSkge1xuICBAbWVkaWEgKG1pbi13aWR0aDogI3skbWVkaWF9KSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8g0JzQsNC60YHQuNC80LDQu9GM0L3QsNGPINGI0LjRgNC40L3QsCDRjdC60YDQsNC90LBcbkBtaXhpbiBtZWRpYU1heCgkbWVkaWEpIHtcbiAgQG1lZGlhIChtYXgtd2lkdGg6ICN7JG1lZGlhfSkge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vINCU0LjQsNC/0LDQt9C+0L0g0YjQuNGA0LjQvdGLINGN0LrRgNCw0L3QsCDQvtGCINC80LjQvdC40LzQsNC70YzQvdC+0Lkg0LTQviDQvNCw0LrRgdC40LzQsNC70YzQvdC+0LlcbkBtaXhpbiBtZWRpYU1pbk1heCgkbWluLCAkbWF4KSB7XG4gIEBtZWRpYSAobWluLXdpZHRoOiAjeyRtaW59KSBhbmQgKG1heC13aWR0aDogI3skbWF4fSkge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vINCc0LjQutGB0LjQvSDQtNC70Y8g0YHRgtC40LvQuNC30LDRhtC40Lgg0L/Qu9C10LnRgdGF0L7Qu9C00LXRgNCwINCyINGC0LXQutGB0YLQvtCy0YvRhSDQv9C+0LvRj9GFXG5AbWl4aW4gcGxhY2Vob2xkZXIge1xuICAmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgICBAY29udGVudDtcbiAgfVxuICAmOi1tb3otcGxhY2Vob2xkZXIge1xuICAgIEBjb250ZW50O1xuICB9XG4gICY6Oi1tb3otcGxhY2Vob2xkZXIge1xuICAgIEBjb250ZW50O1xuICB9XG4gICY6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLyDQnNC40LrRgdC40L0g0LTQu9GPINC90LDRgdGC0YDQvtC50LrQuCDRgdGC0LjQu9C10Lkg0L/QvtC70L7RgdGLINC/0YDQvtC60YDRg9GC0LrQuCDQsiDQstC10LEt0L/RgNC40LvQvtC20LXQvdC40Y/RhVxuQG1peGluIHNjcm9sbGJhcigkc2l6ZTogMTBweCwgJHVzZTogJHNjcm9sbGJhci1jb2xvcikge1xuICAmOjotd2Via2l0LXNjcm9sbGJhciB7XG4gICAgd2lkdGg6ICRzaXplO1xuICAgIGhlaWdodDogJHNpemU7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYmFja2dyb3VuZDogcmdiYSgkdXNlLCAwLjMpO1xuICB9XG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKCR1c2UsIDAuOCk7XG4gIH1cbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6aG92ZXIge1xuICAgIGJhY2tncm91bmQ6IHJnYmEoJHVzZSwgMSk7XG4gIH1cbn1cblxuLy8g0JzQuNC60YHQuNC9INC00LvRjyDQvdCw0YHRgtGA0L7QudC60Lgg0YHRgtC40LvQtdC5INC/0L7Qu9C+0YHRiyDQv9GA0L7QutGA0YPRgtC60Lgg0YEg0LLQvtC30LzQvtC20L3QvtGB0YLRjNGOINCy0YvQsdC+0YDQsCDRhtCy0LXRgtCwINC4INC30LDQutGA0YPQs9C70LXQvdC40Y8g0YPQs9C70L7QslxuQG1peGluIHNjcm9sbGJhci12YXJpYWJsZSgkc2l6ZTogMTBweCwgJHVzZTogXCJiYXNlXCIsICRyb3VuZGVkOiBmYWxzZSkge1xuICAmOjotd2Via2l0LXNjcm9sbGJhciB7XG4gICAgd2lkdGg6ICRzaXplO1xuICAgIGhlaWdodDogJHNpemU7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYmFja2dyb3VuZDogY29sb3IoJHVzZSwgJGE6IC0wLjcpO1xuICAgIEBpZiAkcm91bmRlZCB7XG4gICAgICBib3JkZXItcmFkaXVzOiAkc2l6ZSAqIDI7XG4gICAgfVxuICB9XG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgICBiYWNrZ3JvdW5kOiBjb2xvcigkdXNlLCAkYTogLTAuMik7XG4gICAgQGlmICRyb3VuZGVkIHtcbiAgICAgIGJvcmRlci1yYWRpdXM6ICRzaXplICogMjtcbiAgICB9XG4gIH1cbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6aG92ZXIge1xuICAgIGJhY2tncm91bmQ6IGNvbG9yKCR1c2UpO1xuICB9XG59XG5cbi8vINCc0LjQutGB0LjQvSDQtNC70Y8g0YHQutGA0YvRgtC40Y8g0L/QvtC70L7RgdGLINC/0YDQvtC60YDRg9GC0LrQuCDQsiDQstC10LEt0L/RgNC40LvQvtC20LXQvdC40Y/RhVxuQG1peGluIHNjcm9sbGJhci1oaWRlKCkge1xuICAmOjotd2Via2l0LXNjcm9sbGJhciB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB3aWR0aDogMDtcbiAgICBoZWlnaHQ6IDA7XG4gIH1cbn1cblxuLy8g0JzQuNC60YHQuNC9INC00LvRjyDRgdC+0LfQtNCw0L3QuNGPINC/0LXRgNC10YXQvtC00L7QsiDRgSDQv9C+0LTQtNC10YDQttC60L7QuSDQvdC10YHQutC+0LvRjNC60LjRhSDRgdCy0L7QudGB0YLQsiwg0LTQu9C40YLQtdC70YzQvdC+0YHRgtC4INC4INGE0YPQvdC60YbQuNC4INC/0LvQsNCy0L3QvtGB0YLQuFxuQG1peGluIHRyYW5zaXRpb24oJHByb3AsICR0aW1lOiAxNTBtcywgJGVhc2luZzogZWFzZS1pbikge1xuICAkdHJhbnNpdGlvbjogKCk7XG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRwcm9wKSB7XG4gICAgQGZvciAkaiBmcm9tIDAgdG8gKGxlbmd0aCgkcHJvcCkpIC0gKGxlbmd0aCgkdGltZSkpIHtcbiAgICAgICR0aW1lOiBqb2luKCR0aW1lLCBudGgoJHRpbWUsIC0xKSk7XG4gICAgfVxuICAgIEBmb3IgJGogZnJvbSAwIHRvIChsZW5ndGgoJHByb3ApKSAtIChsZW5ndGgoJGVhc2luZykpIHtcbiAgICAgICRlYXNpbmc6IGpvaW4oJGVhc2luZywgbnRoKCRlYXNpbmcsIC0xKSk7XG4gICAgfVxuICAgICR0cmFuc2l0aW9uOiBhcHBlbmQoXG4gICAgICAkdHJhbnNpdGlvbixcbiAgICAgIChudGgoJHByb3AsICRpKSBudGgoJHRpbWUsICRpKSBudGgoJGVhc2luZywgJGkpKSxcbiAgICAgIGNvbW1hXG4gICAgKTtcbiAgfVxuICB0cmFuc2l0aW9uOiAkdHJhbnNpdGlvbjtcblxuICAkc2VwYXJhdGVkOiAoKTtcbiAgQGlmIGxlbmd0aCgkcHJvcCkgPiAxIHtcbiAgICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIGxlbmd0aCgkcHJvcCkge1xuICAgICAgJHNlcGFyYXRlZDogYXBwZW5kKCRzZXBhcmF0ZWQsIG50aCgkcHJvcCwgJGkpLCBjb21tYSk7XG4gICAgfVxuICAgIHdpbGwtY2hhbmdlOiAkc2VwYXJhdGVkO1xuICB9IEBlbHNlIGlmIGxlbmd0aCgkcHJvcCkgPT0gMSB7XG4gICAgQGlmICRwcm9wICE9IFwiYWxsXCIge1xuICAgICAgd2lsbC1jaGFuZ2U6ICRwcm9wO1xuICAgIH1cbiAgfVxufVxuXG4vLyDQnNC40LrRgdC40L0g0LTQu9GPINGB0L7Qt9C00LDQvdC40Y8g0LHQu9C+0LrQsCDRgSDRhNC40LrRgdC40YDQvtCy0LDQvdC90YvQvCDRgdC+0L7RgtC90L7RiNC10L3QuNC10Lwg0YHRgtC+0YDQvtC9ICjQvdCw0L/RgNC40LzQtdGALCDQtNC70Y8g0LjQt9C+0LHRgNCw0LbQtdC90LjQuSlcbkBtaXhpbiBhc3BlY3QtcmF0aW8oJHdpZHRoLCAkaGVpZ2h0LCAkZWxlbWVudDogaWZyYW1lKSB7XG4gIHdpZHRoOiAxMDAlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICY6YWZ0ZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgY29udGVudDogXCJcIjtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLXRvcDogbWF0aC5kaXYoJGhlaWdodCwgJHdpZHRoKSAqIDEwMCU7XG4gIH1cbiAgPiAjeyRlbGVtZW50fSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB6LWluZGV4OiAyO1xuICAgIEBpZiAoJGVsZW1lbnQgPT0gXCJ2aWRlb1wiIG9yICRlbGVtZW50ID09IFwiaWZyYW1lXCIpIHtcbiAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgb2JqZWN0LXBvc2l0aW9uOiBjZW50ZXI7XG4gICAgfVxuICB9XG59XG5cbi8vINCc0LjQutGB0LjQvSDQtNC70Y8g0L7Qv9GA0LXQtNC10LvQtdC90LjRjyDQv9C+0LvRjNC30L7QstCw0YLQtdC70YzRgdC60LjRhSDRhtCy0LXRgtC+0LIg0LIg0YTQvtGA0LzQsNGC0LUgSFNMQVxuQG1peGluIGRlZmluZS1jb2xvcigkbmFtZSwgJGhleCkge1xuICA6cm9vdCB7XG4gICAgLS1uai0jeyRuYW1lfS1oOiAje2h1ZSgkaGV4KX07XG4gICAgLS1uai0jeyRuYW1lfS1zOiAje3NhdHVyYXRpb24oJGhleCl9O1xuICAgIC0tbmotI3skbmFtZX0tbDogI3tsaWdodG5lc3MoJGhleCl9O1xuICAgIC0tbmotI3skbmFtZX0tYTogI3thbHBoYSgkaGV4KX07XG4gIH1cbn1cblxuQG1peGluIGRlZmluZS1ncmFkaWVudCgkbmFtZSwgJGdyYWRpZW50KSB7XG4gIDpyb290IHtcbiAgICAtLSN7JG5hbWV9LWdyYWRpZW50OiAjeyRncmFkaWVudH07XG4gIH1cbn1cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRjyDQv9C+0LvRjNC30L7QstCw0YLQtdC70YzRgdC60LjRhSDRhtCy0LXRgtC+0LIg0LIg0YTQvtGA0LzQsNGC0LUgSFNMQSDRgSDQstC+0LfQvNC+0LbQvdC+0YHRgtGM0Y4g0L3QsNGB0YLRgNC+0LnQutC4INC+0YLRgtC10L3QutCwLCDQvdCw0YHRi9GJ0LXQvdC90L7RgdGC0LgsINGB0LLQtdGC0LvQvtGC0Ysg0Lgg0L/RgNC+0LfRgNCw0YfQvdC+0YHRgtC4XG5AZnVuY3Rpb24gdXNlLWNvbG9yKCRuYW1lLCAkbDogMCUsICRzOiAwJSwgJGE6IDApIHtcbiAgQHJldHVybiBoc2xhKFxuICAgIHZhcigtLW5qLSN7JG5hbWV9LWgpLFxuICAgIGNhbGModmFyKC0tbmotI3skbmFtZX0tcykgKyAjeyRzfSksXG4gICAgY2FsYyh2YXIoLS1uai0jeyRuYW1lfS1sKSArICN7JGx9KSxcbiAgICBjYWxjKHZhcigtLW5qLSN7JG5hbWV9LWEpICsgI3skYX0pXG4gICk7XG59XG5cbi8vINCc0LjQutGB0LjQvSDQtNC70Y8g0YbQtdC90YLRgNC40YDQvtCy0LDQvdC40Y8g0Y3Qu9C10LzQtdC90YLQvtCyINGBINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNC10LwgZmxleGJveCDRgSDQstC+0LfQvNC+0LbQvdC+0YHRgtGM0Y4g0LfQsNC00LDRgtGMINC+0YLRgdGC0YPQvyDQuCDRgNCw0YHRgdGC0L7Rj9C90LjQtSDQvNC10LbQtNGDINGN0LvQtdC80LXQvdGC0LDQvNC4XG5AbWl4aW4gZmxleC1jZW50ZXItZ2FwLXBhZCgkZ2FwOiAwLCAkcGFkZGluZzogMCkge1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6ICRnYXA7XG4gIHBhZGRpbmc6IHB4LXRvLXJlbSgkcGFkZGluZyk7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuXG4vLyDQnNC40LrRgdC40L0g0LTQu9GPINGD0YHRgtCw0L3QvtCy0LrQuCDQttC40YDQvdC+0YHRgtC4INGI0YDQuNGE0YLQsFxuQG1peGluIGZ3KCRzaXplOiAwKSB7XG4gIGZvbnQtd2VpZ2h0OiAkc2l6ZTtcbn1cbiIsIiosXG46OmJlZm9yZSxcbjo6YWZ0ZXIge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG5odG1sIHtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aSwgXCJTZWdvZSBVSVwiLCBSb2JvdG8sIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWYsXG4gICAgXCJBcHBsZSBDb2xvciBFbW9qaVwiLCBcIlNlZ29lIFVJIEVtb2ppXCI7XG4gIGxpbmUtaGVpZ2h0OiAxLjE1OyAvKiAxLiBDb3JyZWN0IHRoZSBsaW5lIGhlaWdodCBpbiBhbGwgYnJvd3NlcnMuICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMi4gUHJldmVudCBhZGp1c3RtZW50cyBvZiBmb250IHNpemUgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlcyBpbiBpT1MuICovXG4gIC1tb3otdGFiLXNpemU6IDQ7IC8qIDMuIFVzZSBhIG1vcmUgcmVhZGFibGUgdGFiIHNpemUgKG9waW5pb25hdGVkKS4gKi9cbiAgdGFiLXNpemU6IDQ7IC8qIDMgKi9cbiAgZm9udC1zaXplOiAxMDAlICFpbXBvcnRhbnQ7XG59XG5cbmJvZHkge1xuICBtYXJnaW46IDA7IC8qIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2Vycy4gKi9cbn1cblxuaHIge1xuICBoZWlnaHQ6IDA7IC8qIDEgKi9cbiAgY29sb3I6IGluaGVyaXQ7IC8qIDIgKi9cbn1cblxuYWJiclt0aXRsZV0ge1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7XG59XG5cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZGVyO1xufVxuXG5jb2RlLFxua2JkLFxuc2FtcCxcbnByZSB7XG4gIGZvbnQtZmFtaWx5OiB1aS1tb25vc3BhY2UsIFNGTW9uby1SZWd1bGFyLCBDb25zb2xhcywgXCJMaWJlcmF0aW9uIE1vbm9cIiwgTWVubG8sXG4gICAgbW9ub3NwYWNlOyAvKiAxICovXG4gIGZvbnQtc2l6ZTogMWVtOyAvKiAyICovXG59XG5cbnNtYWxsIHtcbiAgZm9udC1zaXplOiA4MCU7XG59XG5cbnN1YixcbnN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTtcbn1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07XG59XG5cbnRhYmxlIHtcbiAgdGV4dC1pbmRlbnQ6IDA7IC8qIDEgKi9cbiAgYm9yZGVyLWNvbG9yOiBpbmhlcml0OyAvKiAyICovXG59XG5cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0OyAvKiAxICovXG4gIGZvbnQtc2l6ZTogMTAwJTsgLyogMSAqL1xuICBsaW5lLWhlaWdodDogMS4xNTsgLyogMSAqL1xuICBtYXJnaW46IDA7IC8qIDIgKi9cbn1cblxuLyoqXG5SZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEVkZ2UgYW5kIEZpcmVmb3guXG4qL1xuXG5idXR0b24sXG5zZWxlY3Qge1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbn1cblxuLyoqXG5Db3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuKi9cblxuYnV0dG9uLFxuW3R5cGU9XCJidXR0b25cIl0sXG5bdHlwZT1cInJlc2V0XCJdLFxuW3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbn1cblxuLyoqXG5SZW1vdmUgdGhlIGlubmVyIGJvcmRlciBhbmQgcGFkZGluZyBpbiBGaXJlZm94LlxuKi9cblxuOjotbW96LWZvY3VzLWlubmVyIHtcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xuICBwYWRkaW5nOiAwO1xufVxuXG4vKipcblJlc3RvcmUgdGhlIGZvY3VzIHN0eWxlcyB1bnNldCBieSB0aGUgcHJldmlvdXMgcnVsZS5cbiovXG5cbjotbW96LWZvY3VzcmluZyB7XG4gIG91dGxpbmU6IDFweCBkb3R0ZWQgQnV0dG9uVGV4dDtcbn1cblxuLyoqXG5SZW1vdmUgdGhlIGFkZGl0aW9uYWwgJzppbnZhbGlkJyBzdHlsZXMgaW4gRmlyZWZveC5cblNlZTogaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvZ2Vja28tZGV2L2Jsb2IvMmY5ZWFjZDlkM2Q5OTVjOTM3YjQyNTFhNTU1N2Q5NWQ0OTRjOWJlMS9sYXlvdXQvc3R5bGUvcmVzL2Zvcm1zLmNzcyNMNzI4LUw3MzdcbiovXG5cbjotbW96LXVpLWludmFsaWQge1xuICBib3gtc2hhZG93OiBub25lO1xufVxuXG4vKipcblJlbW92ZSB0aGUgcGFkZGluZyBzbyBkZXZlbG9wZXJzIGFyZSBub3QgY2F1Z2h0IG91dCB3aGVuIHRoZXkgemVybyBvdXQgJ2ZpZWxkc2V0JyBlbGVtZW50cyBpbiBhbGwgYnJvd3NlcnMuXG4qL1xuXG5sZWdlbmQge1xuICBwYWRkaW5nOiAwO1xufVxuXG4vKipcbkFkZCB0aGUgY29ycmVjdCB2ZXJ0aWNhbCBhbGlnbm1lbnQgaW4gQ2hyb21lIGFuZCBGaXJlZm94LlxuKi9cblxucHJvZ3Jlc3Mge1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbi8qKlxuQ29ycmVjdCB0aGUgY3Vyc29yIHN0eWxlIG9mIGluY3JlbWVudCBhbmQgZGVjcmVtZW50IGJ1dHRvbnMgaW4gU2FmYXJpLlxuKi9cblxuOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcbiAgaGVpZ2h0OiBhdXRvO1xufVxuXG4vKipcbjEuIENvcnJlY3QgdGhlIG9kZCBhcHBlYXJhbmNlIGluIENocm9tZSBhbmQgU2FmYXJpLlxuMi4gQ29ycmVjdCB0aGUgb3V0bGluZSBzdHlsZSBpbiBTYWZhcmkuXG4qL1xuXG5bdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvKiAxICovXG4gIG91dGxpbmUtb2Zmc2V0OiAtMnB4OyAvKiAyICovXG59XG5cbi8qKlxuUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIG1hY09TLlxuKi9cblxuOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xufVxuXG4vKipcbjEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4yLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvICdpbmhlcml0JyBpbiBTYWZhcmkuXG4qL1xuXG46Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247IC8qIDEgKi9cbiAgZm9udDogaW5oZXJpdDsgLyogMiAqL1xufVxuXG4vKlxuSW50ZXJhY3RpdmVcbj09PT09PT09PT09XG4qL1xuXG4vKlxuQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXG4qL1xuXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogbGlzdC1pdGVtO1xufVxuIiwiYm9keSB7XG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IDEwMCU7XG59XG5zZWN0aW9uIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi5jb250YWluZXIge1xuICBtYXJnaW46IDAgYXV0bztcbiAgcGFkZGluZzogMCAyMHB4O1xufVxuLmhvdmVyLWl0ZW0ge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDgwJTtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoNDVkZWcsICNjYThhMDQsICNmYWNjMTUpO1xuICAgIHotaW5kZXg6IDA7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICBjb2xvcjogIzAwMDtcbiAgICB0cmFuc2l0aW9uOiAwLjNzIGVhc2UtaW47XG4gICAgei1pbmRleDogLTE7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxufVxuLmRyb3Bkb3duIHtcbiAgc2NhbGU6IDE7XG4gIHRyYW5zaXRpb246IDAuMnMgZWFzZS1pbjtcbiAgJjphY3RpdmUge1xuICAgIHNjYWxlOiAwLjk7XG4gICAgdHJhbnNpdGlvbjogMC4ycyBlYXNlLWluO1xuICB9XG59XG4uaG92ZXItaXRlbTpob3ZlciB7XG4gICY6OmFmdGVyIHtcbiAgICB3aWR0aDogMTIwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgb3BhY2l0eTogMTtcbiAgICB0cmFuc2l0aW9uOiAwLjNzIGVhc2UtaW47XG4gIH1cbn1cbi5ob3Zlci1zY2FsZSB7XG4gIHNjYWxlOiAxO1xuICB0cmFuc2l0aW9uOiAwLjNzIGVhc2UtaW47XG4gICY6aG92ZXIge1xuICAgIHNjYWxlOiAxLjE7XG4gICAgdHJhbnNpdGlvbjogMC4zcyBlYXNlLWluO1xuICB9XG4gICY6YWN0aXZlIHtcbiAgICBzY2FsZTogMC45O1xuICB9XG59XG4uZm9udC1zbWFsbCB7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgbGluZS1oZWlnaHQ6IDE0cHg7XG59XG4iLCIuZm9vdGVye1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjMsIDIyLCAyMiwgMC40NzUpO1xuICAgIHBhZGRpbmc6IDc1cHggNTBweDtcbn1cbiIsIlxuLmhlYWRlcntcbiAgICBiYWNrZ3JvdW5kOiB1c2UtY29sb3IoYmxhY2ssIDEwJSwgNSUpO1xuICAgIHBhZGRpbmc6IHJlc3AoMTAwKSAwO1xufSJdfQ== */
